Index: src/main/java/com/epam/javaTraining/globoforceTestProject/Nominee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/epam/javaTraining/globoforceTestProject/Nominee.java	(revision cb5a33527023b4dcfe784e814873f5f5e2cd1578)
+++ src/main/java/com/epam/javaTraining/globoforceTestProject/Nominee.java	(revision 7c173727ca75b818bca0af9b82e39d07d97258f3)
@@ -9,15 +9,18 @@
  */
 public class Nominee extends Person {
 //    private String name;
-//    private int nomineeAwardQuantityLimit = 5;
+    private int nomineeAwardQuantityLimit = 5;
     private float nomineeAwardAmountLimit = 1000f;
+    private static final int NOMINEE_AWARD_AMOUNT_LIMIT = 10;
+    private static final int NOMINEE_AWARD_QUANTITY_LIMIT = 10;
+
     String value;
     private final double c;
     private final int z;
     private ArrayList<Award> array = new ArrayList<Award>();
 
     static {
-        String value = String.format("Hello from Nominee class");
+        String value = String.format("Hello  from Nominee  class", "some1", "test2");
         System.out.println(value);
     }
 
@@ -27,12 +30,14 @@
         z = rand.nextInt(10);
     }
 
+
     /**
      * This constructor is used if award quantity and award amount limits for nominator are default for nominee (award amount limit has specific default value for nominees)
      * @param name nominee's name
      */
     public Nominee (String name) {
-        super (name);
+        super(name,NOMINEE_AWARD_QUANTITY_LIMIT, NOMINEE_AWARD_AMOUNT_LIMIT);
+
     }
 
     /**
@@ -43,18 +48,8 @@
 
     public Nominee(String name, int nomineeAwardQuantityLimit, float nomineeAwardAmountLimit) {
         super(name, nomineeAwardQuantityLimit, nomineeAwardAmountLimit);
-        this.nomineeAwardAmountLimit = nomineeAwardAmountLimit;
     }
 
-    @Override
-    public float getAwardAmountLimit() {
-        return nomineeAwardAmountLimit;
-    }
-
-    @Override
-    public void setAwardAmountLimit(float nomineeAwardAmountLimit) {
-        this.nomineeAwardAmountLimit = nomineeAwardAmountLimit;
-    }
 
     /**
      * Method 'recieveAward' defines whether nominee is able to receive an award or not according to his own award quantity (nomineeAwardQuantityLimit) and award amount limit (nomineeAwardAmountLimit).
@@ -65,6 +60,22 @@
      * @param award award that nominator is intending to give to nominee
      */
     public void receiveAward(Award award) {
+        if (isEligible(award.getValue(), getAwardQuantityLimit(), getAwardAmountLimit())) {
+            array.add(award);
+            setAwardAmountLimit(getAwardAmountLimit() - award.getValue());
+            setAwardQuantityLimit(getAwardQuantityLimit() - 1);
+        } else if (getAwardQuantityLimit() > 0 && getAwardAmountLimit() < award.getValue()) {
+            System.out.println("It's impossible to create an award that has value " + award.getValue() + " USD (more than nominee's balance)");
+        } else {
+            System.out.println("Award wasn't created due to reaching limit for the recipient");
+        }
+    }
+
+    public double calculateSoli(Award award) {
+        return (award.getSoli() < 0) ? NominationHelper.getQuantity(array,award.getValue(), z, c) : 0;
+    }
+
+    public void showAwardQuantityLimit() {
         switch (getAwardQuantityLimit()) {
             case 0:
                 System.out.println(this.getName() + " isn't able to receive any awards");
@@ -76,24 +87,7 @@
                 System.out.println(this.getName() + " is able to receive " + getAwardQuantityLimit() + " awards");
                 break;
         }
-        //if (getNomineeAwardQuantityLimit() > 0 && getNomineeAwardAmountLimit() >= award.getValue()) {
-        if (isEligible(award.getValue(),getAwardQuantityLimit(),getAwardAmountLimit()) == true) {
-            array.add(award);
-            if (award.getSoli() > 0) {
-                System.out.println("Nominee is " + getName() + "\n" + "Nominee's balance is " + getAwardAmountLimit() + "\n" + "Due to SOLI index, the actual amount of the award is " + award.getSoli() + " USD. It is " + award.getSoli() / award.getValue() * 100 + "% of the award amount.");
-            } else {
-                System.out.println("Nominee is " + getName() + "\n" + "Nominee's balance is " + getAwardAmountLimit() + "\n" + "SOLI index isn't applied for this award. The actual amount of the award is " + award.getValue() + " USD.");
-                System.out.println("Quantity = " + NominationHelper.getQuantity(award.getValue(), z, c, NominationHelper.getPopulation(array)));
-            }
-            setAwardAmountLimit(getAwardAmountLimit() - award.getValue());
-            setAwardQuantityLimit(getAwardQuantityLimit() - 1);
-        } else if (getAwardQuantityLimit() > 0 && getAwardAmountLimit() < award.getValue()) {
-            System.out.println("It's impossible to create an award that has value " + award.getValue() + " USD (more than nominee's balance)");
-        } else {
-            System.out.println("Award wasn't created due to reaching limit for the recipient");
-        }
     }
-
     /**
      * Method 'canBeNominated' defines whether nominee is able to receive the award or not
      *
@@ -101,10 +95,7 @@
      * @return true if nominee's balance is higher than award value and award quantity limit
      */
     public boolean canBeNominated(Award award) {
-        if (getAwardQuantityLimit() > 0 && getAwardAmountLimit() >= award.getValue()) {
-            return true;
-        }
-        return false;
+        return getAwardQuantityLimit() > 0 && getAwardAmountLimit() >= award.getValue();
     }
 }
 
Index: src/main/java/com/epam/javaTraining/globoforceTestProject/NominationHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/epam/javaTraining/globoforceTestProject/NominationHelper.java	(date 1516184488000)
+++ src/main/java/com/epam/javaTraining/globoforceTestProject/NominationHelper.java	(date 1516457851000)
@@ -17,9 +17,9 @@
      * @param population amount of employee's awards without soli
      * @return quantity
      */
-    public static double getQuantity(int value, int z, double c, int population) {
+    public static double getQuantity(ArrayList<Award> array, int value, int z, double c) {
         double x = ((z * z * value) * (1 - value)) / (c * c);
-        double quantity = x / ((1 + ((x - 1) / population)));
+        double quantity = x / ((1 + ((x - 1) / getPopulation(array))));
         return quantity;
     }
 
Index: src/main/java/com/epam/javaTraining/globoforceTestProject/Runner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/epam/javaTraining/globoforceTestProject/Runner.java	(date 1516184488000)
+++ src/main/java/com/epam/javaTraining/globoforceTestProject/Runner.java	(date 1516457851000)
@@ -1,5 +1,8 @@
 package com.epam.javaTraining.globoforceTestProject;
 
+import java.io.IOException;
+import java.util.Scanner;
+
 /**
  * @author Viachaslau_Kavaliou
  * @version 1.0, 17-DEC-2017
@@ -15,7 +18,11 @@
      * @param args array of String objects
      */
     public static void main(String[] args) {
-        Nominee nominee1 = new Nominee("Erin");
+        Runner runner = new Runner();
+        Scanner sc = new Scanner(System.in);
+        System.out.println("Nominee name 1");
+        Nominee nominee1 = new Nominee(sc.next());
+
         Nominee nominee2 = new Nominee("Siarhei", 3, 100000.0f);
         Nominee nominee3 = new Nominee("Stephen", 5, 20000.0f);
         Award award1 = new Award(2000);
@@ -33,6 +40,13 @@
         nominator1.nominate(award3, nominee3);
         nominator1.nominate(award2, nominee3);
 
+
+        nominee1.showAwardQuantityLimit();
+        double soli = nominee1.calculateSoli(award1);
+        runner.showSoli(soli, nominee1, award1);
+
+
+
 //        for (int i =1; i< nominator1.getNominatorAwardQuantityLimit(); i++) {
 //            nominator1.nominate1(award1, nominee1);
 //            System.out.println(i + "test" + award1.getValue());
@@ -47,6 +61,15 @@
 //        }
 //        while (nominee1.getNomineeAwardQuantityLimit() > j);
 
+    }
+
+    public void showSoli(double soli, Person person, Award award) {
+        if (soli > 0) {
+            System.out.println("Nominee is " + person.getName() + "\n" + "Nominee's balance is " + person.getAwardAmountLimit() + "\n" + "Due to SOLI index, the actual amount of the award is " + soli + " USD. It is " + soli / award.getValue() * 100 + "% of the award amount.");
+        } else {
+            System.out.println("Nominee is " + person.getName() + "\n" + "Nominee's balance is " + person.getAwardAmountLimit() + "\n" + "SOLI index isn't applied for this award. The actual amount of the award is " + award.getValue() + " USD.");
+            System.out.println("Quantity = " + soli);
+        }
     }
 }
 
